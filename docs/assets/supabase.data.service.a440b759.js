var p=Object.defineProperty;var w=(l,t,e)=>t in l?p(l,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):l[t]=e;var s=(l,t,e)=>(w(l,typeof t!="symbol"?t+"":t,e),e);import{c as x,B as I}from"./BehaviorSubject.723a750e.js";import{N as S,l as h}from"./network.service.3d516c00.js";const q="https://kwmjtwyvwupiycxiitll.supabase.co",v="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt3bWp0d3l2d3VwaXljeGlpdGxsIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NjQ5MTk4ODksImV4cCI6MTk4MDQ5NTg4OX0.yRWZ9DVk46cawYg8Nu1i02xDc3xLKqRLnT1agO9hXL4";let n,d;const C=S.getInstance();let m=!1;const u=class{constructor(){s(this,"isConnected",()=>typeof n!="undefined");s(this,"getSupabase",()=>n);s(this,"connect",async()=>{this.isConnected()||(n=await x(q,v))});s(this,"gen_random_uuid",()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var e=Math.random()*16|0,r=t==="x"?e:e&3|8;return r.toString(16)}));s(this,"uuid_generate_v4",this.gen_random_uuid);s(this,"getDataSubscription",(t,e)=>{const r=t+(e?":"+JSON.stringify(e):"");return u.datasets[r]=new I([]),this.updateDataSubscription(t,e),u.datasets[r]});s(this,"updateDataSubscription",async(t,e)=>{const r=t+(e?":"+JSON.stringify(e):""),a=this.loadCache(r);if(a!==null&&u.datasets[r].next(a),!d)return;console.log(`loadFunction: load_${t}`);const i=this[`load_${t}`];if(!i){console.error("supabaseDataService: missing function load_"+t);return}e?e={...e,cached:a!==null}:e={cached:a!==null};try{const{data:o,error:c}=await i(e);c?(console.error("updateDataSubscription: error",c),c.message):(u.datasets[r].next(o),this.saveCache(o,r))}catch{}});s(this,"loadCache",t=>{const e=localStorage.getItem(t);return e?JSON.parse(e):null});s(this,"processQueue",async()=>{if(d){const t=JSON.parse(localStorage.getItem("update-queue")||"[]");if(t.length>0){const{functionName:e,table:r,record:a,timestamp:i}=t.shift();if(e==="saveRecord"||e==="deleteRecord"){const{status:c,data:y,error:f}=await this.checkRecordVersion(r,a);console.log(`function: ${e}:`,"status",c,"data",y,"error",f),c==="conflict"&&(console.log("conflict detected"),console.log("queued record:",a))}const{error:o}=await this[e](r,a);if(o){console.error("error processing update queue",o),console.error("functionName",e),console.error("table",r),console.error("record",a),console.error("timestamp",i);return}else localStorage.setItem("update-queue",JSON.stringify(t)),this.processQueue()}else console.log("processQueue: queue is empty"),m=!1}});s(this,"updateCollection",async(t,e,r="id")=>{const a=t.findIndex(i=>i[r]===e[r]);return a>-1?t[a]=e:t.push(e),t});s(this,"deleteFromCollection",async(t,e,r="id")=>{const a=t.findIndex(i=>i[r]===(typeof e=="string"?e:e[r]));return a>-1&&t.splice(a,1),t});s(this,"load_widgets",async(t={})=>{let e;t.cached||(e=await h("loading widgets...")),this.isConnected()||await this.connect();const{data:r,error:a}=await n.from("widgets").select().order("name");return t.cached||e.dismiss(),{data:r,error:a}});s(this,"load_widget",async(t={})=>{let e;t.cached||(e=await h("loading widget...")),this.isConnected()||await this.connect();const{data:r,error:a}=await n.from("widgets").select().eq("id",t.id).limit(1).single();return t.cached||e.dismiss(),{data:r,error:a}});s(this,"load_days",async(t={})=>{let e;t.cached||(e=await h("loading days...")),this.isConnected()||await this.connect();const{data:r,error:a}=await n.from("days").select().order("date",{ascending:!1}).limit(31);return t.cached||e.dismiss(),{data:r,error:a}});s(this,"load_day",async(t={})=>{let e;t.cached||(e=await h("loading day...")),this.isConnected()||await this.connect();const{data:r,error:a}=await n.from("days").select().eq("id",t.id).limit(1).single();return t.cached||e.dismiss(),{data:r,error:a}});s(this,"getSingleRecordById",async(t,e)=>{const{data:r,error:a}=await n.from(t).select("*").eq("id",e).limit(1).single();return{data:r,error:a}});s(this,"updateUserSetting",async(t,e)=>{const{user:r,error:a}=await n.auth.update({data:{[t]:e}});return a?console.error("updateUserSetting error",a):console.log("updateUserSetting result (user):",r),{user:r,error:a}})}static getInstance(){return this.myInstance===null&&(this.myInstance=new this,this.myInstance.connect()),this.myInstance}saveCache(t,e){return localStorage.setItem(e,JSON.stringify(t)),t}clearCache(t){localStorage.removeItem(t)}clearAllCache(){localStorage.clear()}queueUpdate(t,e,r){const a=JSON.parse(localStorage.getItem("update-queue")||"[]");a.push({functionName:t,table:e,record:r,timestamp:+Date.now()}),localStorage.setItem("update-queue",JSON.stringify(a))}async checkRecordVersion(t,e,r="updated_at"){if(d){const{error:a,count:i}=await n.from(t).select("id",{count:"exact"}).eq("id",e.id);if(a)return console.error("checkRecordVersion getCount: error",a),{status:"error",error:a};if(i===0)return{status:"notFound",data:null,error:null};if(i>1)return{status:"multipleFound",data:null,error:null};const{data:o,error:c}=await n.from(t).select(`id, ${r}`).eq("id",e.id).single();if(c)return{status:"error",data:null,error:c};if(o&&typeof o[r]==typeof e[r]){if(o[r]===e[r])return{status:"ok",data:o,error:c};{console.log(`${r} conflict detected, ${o[r]} != ${e[r]}`);const{data:y,error:f}=await n.from(t).select("*").eq("id",e.id).single();return f?{status:"conflict",data:o,error:f}:{status:"conflict",data:y,error:f}}}else return{status:"error",data:null,error:`${r} data missing or wrong type`}}else return{status:"offline",data:null,error:null}}async saveRecord(t,e){if(d){console.log("saveRecord",t,e);const{data:r,error:a}=await n.from(t).upsert(e);return console.log("data",r,"error",a),{data:r,error:a}}else return this.queueUpdate("saveRecord",t,e),{data:null,error:null}}async deleteRecord(t,e){if(d){const{data:r,error:a}=await n.from(t).delete().eq("id",e.id);return{data:r,error:a}}else return this.queueUpdate("deleteRecord",t,e),{data:null,error:null}}async save_day(t){const{data:e,error:r}=await this.saveRecord("days",t);return{data:e,error:r}}async delete_day(t){const{data:e,error:r}=await this.deleteRecord("days",t);return{data:e,error:r}}async save_widget(t){const{data:e,error:r}=await this.saveRecord("widgets",t);return{data:e,error:r}}async delete_widget(t){const{data:e,error:r}=await this.deleteRecord("widgets",t);return{data:e,error:r}}async getProfile(t){if(t){const{data:e,error:r}=await n.from("profile").select("*").eq("id",t).limit(1).single();return{data:e,error:r}}else return console.error("#### getProfile: no id"),{data:{},error:null}}async saveProfile(t){const{data:e,error:r}=await n.from("profile").upsert(t);return{data:e,error:r}}};let g=u;s(g,"myInstance",null),s(g,"datasets",{});const R=g.getInstance();C.online.subscribe(l=>{d=l,d&&(console.log("supabase: app came online -- process pending queue"),m?console.error("supabaseDataService: processQueue already active"):(m=!0,R.processQueue()))});export{g as S};
