var S=Object.defineProperty;var v=(d,e,t)=>e in d?S(d,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):d[e]=t;var n=(d,e,t)=>(v(d,typeof e!="symbol"?e+"":e,t),t);import{B as w,c as C}from"./BehaviorSubject.06578408.js";import{l as y}from"./loadingMessage.55947c0d.js";class I{constructor(){n(this,"ping",async(e="/ping")=>{fetch(`${window.location.origin}${e}`).then(t=>t.status===200?(console.log(t),!0):(console.error("ping failed",t),!1)).catch(t=>(console.log("fetch error",t),console.log("do something here"),!1))})}static getInstance(){if(this.myInstance===null){this.myInstance=new this,this.myInstance.online=new w(window.navigator.onLine);const e=this.myInstance.online;window.addEventListener("offline",function(t){e.next(!1)}),window.addEventListener("online",function(t){e.next(!0)}),this.myInstance.forceOnlineValue=t=>{e.next(t)}}return this.myInstance}}n(I,"myInstance",null);class _{constructor(){n(this,"gen_random_uuid",()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=Math.random()*16|0,r=e==="x"?t:t&3|8;return r.toString(16)}));n(this,"uuid_generate_v4",this.gen_random_uuid);n(this,"getToday",()=>{const e=new Date;return new Date(e.getTime()-e.getTimezoneOffset()*6e4).toISOString().split("T")[0]})}static getInstance(){return this.myInstance===null&&(this.myInstance=new this),this.myInstance}}n(_,"myInstance",null);const q=_.getInstance(),R="https://kwmjtwyvwupiycxiitll.supabase.co",O="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt3bWp0d3l2d3VwaXljeGlpdGxsIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NjQ5MTk4ODksImV4cCI6MTk4MDQ5NTg4OX0.yRWZ9DVk46cawYg8Nu1i02xDc3xLKqRLnT1agO9hXL4";let s,g;const k=I.getInstance();let x=!1;const f=class{constructor(){n(this,"isConnected",()=>typeof s!="undefined");n(this,"getSupabase",()=>s);n(this,"connect",async()=>{this.isConnected()||(s=await C(R,O))});n(this,"gen_random_uuid",()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=Math.random()*16|0,r=e==="x"?t:t&3|8;return r.toString(16)}));n(this,"uuid_generate_v4",this.gen_random_uuid);n(this,"getDataSubscription",(e,t)=>{const r=e+(t?":"+JSON.stringify(t):"");return f.datasets[r]=new w([]),this.updateDataSubscription(e,t),f.datasets[r]});n(this,"updateDataSubscription",async(e,t)=>{const r=e+(t?":"+JSON.stringify(t):""),a=this.loadCache(r);if(a!==null&&f.datasets[r].next(a),!g)return;console.log(`loadFunction: load_${e}`);const c=this[`load_${e}`];if(!c){console.error("supabaseDataService: missing function load_"+e);return}t?t={...t,cached:a!==null}:t={cached:a!==null};try{const{data:o,error:i}=await c(t);i?(console.error("updateDataSubscription: error",i),i.message):(f.datasets[r].next(o),this.saveCache(o,r))}catch{}});n(this,"loadCache",e=>{const t=localStorage.getItem(e);return t?JSON.parse(t):null});n(this,"processQueue",async()=>{if(g){const e=JSON.parse(localStorage.getItem("update-queue")||"[]");if(e.length>0){const{functionName:t,table:r,record:a,timestamp:c}=e.shift();if(t==="saveRecord"||t==="deleteRecord"){const{status:i,data:u,error:l}=await this.checkRecordVersion(r,a);console.log(`function: ${t}:`,"status",i,"data",u,"error",l),i==="conflict"&&(console.log("conflict detected"),console.log("queued record:",a))}const{error:o}=await this[t](r,a);if(o){console.error("error processing update queue",o),console.error("functionName",t),console.error("table",r),console.error("record",a),console.error("timestamp",c);return}else localStorage.setItem("update-queue",JSON.stringify(e)),this.processQueue()}else console.log("processQueue: queue is empty"),x=!1}});n(this,"updateCollection",async(e,t,r="id")=>{const a=e.findIndex(c=>c[r]===t[r]);return a>-1?e[a]=t:e.push(t),e});n(this,"deleteFromCollection",async(e,t,r="id")=>{const a=e.findIndex(c=>c[r]===(typeof t=="string"?t:t[r]));return a>-1&&e.splice(a,1),e});n(this,"load_widgets",async(e={})=>{let t;e.cached||(t=await y("loading widgets...")),this.isConnected()||await this.connect();const{data:r,error:a}=await s.from("widgets").select().order("name");return e.cached||t.dismiss(),{data:r,error:a}});n(this,"load_widget",async(e={})=>{let t;e.cached||(t=await y("loading widget...")),this.isConnected()||await this.connect();const{data:r,error:a}=await s.from("widgets").select().eq("id",e.id).limit(1).single();return e.cached||t.dismiss(),{data:r,error:a}});n(this,"load_days",async(e={})=>{console.log("load_days: options",e);let t;e.cached||(t=await y("loading days...")),this.isConnected()||await this.connect();const{data:r,error:a}=await s.from("days").select().order("date",{ascending:!1}).limit(31);return e.cached||t.dismiss(),console.log("load_days: data, error",r,a),{data:r,error:a}});n(this,"load_day",async(e={})=>{let t;e.cached||(t=await y("loading day...")),this.isConnected()||await this.connect();const{data:r,error:a}=await s.from("days").select().eq("id",e.id).limit(1).single();return e.cached||t.dismiss(),{data:r,error:a}});n(this,"load_today",async()=>{let e;e=await y("loading today..."),this.isConnected()||await this.connect();const{data:t,error:r}=await s.from("days").select().eq("date",q.getToday()).limit(1).single();return e.dismiss(),{data:t,error:r}});n(this,"getSingleRecordById",async(e,t)=>{const{data:r,error:a}=await s.from(e).select("*").eq("id",t).limit(1).single();return{data:r,error:a}});n(this,"getRPC",async(e,t={})=>{this.isConnected()||await this.connect();const{data:r,error:a}=await s.rpc(e,t);return{data:r,error:a}});n(this,"updateUserSetting",async(e,t)=>{const{user:r,error:a}=await s.auth.update({data:{[e]:t}});return a?console.error("updateUserSetting error",a):console.log("updateUserSetting result (user):",r),{user:r,error:a}});n(this,"search_food_log",async e=>{const{data:t,error:r}=await s.rpc("search_food_log",{string:e});return{data:t,error:r}});n(this,"search_internet",async e=>{let t=[],r=null,a="",c=!1;e.match(/^[0-9]+$/)?(a="https://us.openfoodfacts.org/api/v0/product/"+e.trim()+".json",c=!0):a=`https://us.openfoodfacts.org/cgi/search.pl?search_terms=${e}&search_simple=1&action=process&json=1&nutriment_0=energy-kcal&nutriment_compare_0=gt&nutriment_value_0=500&fields=code,product_name,nutriments,serving_size&sort_by=product_name`;try{const o=await fetch(a),i=await o.json();if(console.log("response",o),console.log("json",i),!o.ok)return console.error("** fetch ERROR **",o.statusText),r=o.statusText,{data:null,error:r};if(c&&(i.products=[i.product]),i&&i.products)for(let u=0;u<i.products.length;u++){const l=i.products[u];let p=l.serving_size||"";l.nutriments["energy-kcal_100g"]&&(p.length>0&&(p+=" - "),p+=`${Math.round(l.nutriments["energy-kcal_100g"])} cal/100g`);let h=l.nutriments["energy-kcal_serving"]||l.nutriments["energy-kcal"];h?h=Math.round(h):h="???",t.push({title:l.product_name,calories:h,desc:p})}}catch(o){const i=(o.toString()+`
`).split(`
`)[0];console.error("line 1",i),r=i}return{data:t,error:r}})}static getInstance(){return this.myInstance===null&&(this.myInstance=new this,this.myInstance.connect()),this.myInstance}saveCache(e,t){return localStorage.setItem(t,JSON.stringify(e)),e}clearCache(e){localStorage.removeItem(e)}clearAllCache(){localStorage.clear()}queueUpdate(e,t,r){const a=JSON.parse(localStorage.getItem("update-queue")||"[]");a.push({functionName:e,table:t,record:r,timestamp:+Date.now()}),localStorage.setItem("update-queue",JSON.stringify(a))}async checkRecordVersion(e,t,r="updated_at"){if(g){const{error:a,count:c}=await s.from(e).select("id",{count:"exact"}).eq("id",t.id);if(a)return console.error("checkRecordVersion getCount: error",a),{status:"error",error:a};if(c===0)return{status:"notFound",data:null,error:null};if(c>1)return{status:"multipleFound",data:null,error:null};const{data:o,error:i}=await s.from(e).select(`id, ${r}`).eq("id",t.id).single();if(i)return{status:"error",data:null,error:i};if(o&&typeof o[r]==typeof t[r]){if(o[r]===t[r])return{status:"ok",data:o,error:i};{console.log(`${r} conflict detected, ${o[r]} != ${t[r]}`);const{data:u,error:l}=await s.from(e).select("*").eq("id",t.id).single();return l?{status:"conflict",data:o,error:l}:{status:"conflict",data:u,error:l}}}else return{status:"error",data:null,error:`${r} data missing or wrong type`}}else return{status:"offline",data:null,error:null}}async saveRecord(e,t){if(g){console.log("saveRecord",e,t);const{data:r,error:a}=await s.from(e).upsert(t);return console.log("data",r,"error",a),{data:r,error:a}}else return this.queueUpdate("saveRecord",e,t),{data:null,error:null}}async deleteRecord(e,t){if(g){const{data:r,error:a}=await s.from(e).delete().eq("id",t.id);return{data:r,error:a}}else return this.queueUpdate("deleteRecord",e,t),{data:null,error:null}}async save_day(e){const{data:t,error:r}=await this.saveRecord("days",e);return{data:t,error:r}}async delete_day(e){const{data:t,error:r}=await this.deleteRecord("days",e);return{data:t,error:r}}async save_widget(e){const{data:t,error:r}=await this.saveRecord("widgets",e);return{data:t,error:r}}async delete_widget(e){const{data:t,error:r}=await this.deleteRecord("widgets",e);return{data:t,error:r}}async getProfile(e){if(e){const{data:t,error:r}=await s.from("profile").select("*").eq("id",e).limit(1).single();return{data:t,error:r}}else return console.error("#### getProfile: no id"),{data:{},error:null}}async getCurrentWeight(){const{data:e,error:t}=await s.from("days").select("weight").order("date",{ascending:!1}).limit(1).single();return{data:e,error:t}}async getDayId(e){this.isConnected()||await this.connect();const{data:t,error:r}=await s.from("days").select("id").eq("date",e.substring(0,10)).limit(1).single();return{data:t,error:r}}async getNextFreeDay(){this.isConnected()||await this.connect();const{data:e,error:t}=await s.rpc("next_free_day");return{data:e,error:t}}async getSettings(e){this.isConnected()||await this.connect(),console.log("### supabaseDataService.getSettings, uid:",e);const{data:t,error:r}=await s.from("settings").select("*").eq("user_id",e).limit(1).single();return console.log("result-> supabaseDataService.getSettings, data:",t,r),{data:t,error:r}}async saveSettings(e){console.log("** saveSettings",e);const{data:t,error:r}=await s.from("settings").upsert(e);return{data:t,error:r}}async saveProfile(e){const{data:t,error:r}=await s.from("profile").upsert(e);return{data:t,error:r}}};let m=f;n(m,"myInstance",null),n(m,"datasets",{});const D=m.getInstance();k.online.subscribe(d=>{g=d,g&&(console.log("supabase: app came online -- process pending queue"),x?console.error("supabaseDataService: processQueue already active"):(x=!0,D.processQueue()))});export{I as N,m as S,_ as U};
